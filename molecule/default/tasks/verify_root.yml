---
# verify_ports.yml
# EXAMPLE
#  - name: define packages, files, directories and other stuff you want to check lots of
#    set_fact:
#     required_ports:
#       - port: 80
#         name: "nginx:"
#       - port: 443
#         name: "nginx:"

- name: only run this if there are port checks defined
  block:
    - name: port_index
      set_fact:
        # The item.port|int there is important, without that, we need to type cast all other item.port instances
        # to string, otherwise ansible does not see the element as existing, and therefore in accordance with the "when"
        # on the assert instance to check the port is listening, is skipped. This (to the passing eye) could be seen as
        # "test success" whether the port was showing as listening or not
        port_index: "{{ port_index| default({}) | combine( {item.port|int: item} ) }}"
      loop: "{{ required_ports|flatten(levels=1) }}"

    # NOTE: since listen_port_facts creates an array of listening ports, we'll need to traverse all entries and find the ones
    # we're interested in. Therefore, unlike the other tests, port_index is required.
    - name: populate listening port facts
      listen_ports_facts:
      become: true

    - name: check programs a listening on the right ports
      assert:
        that: "{{ item.name == port_index[item.port].name }}"
        msg: "FAILED: port {{ item.port }} is not being listened on by {{ port_index[item.port].name }} as defined in required_ports"
        quiet: true
      loop: "{{ ansible_facts.tcp_listen|flatten(levels=1) }}"
      when: "port_index[item.port] is defined"
  when:
    - required_ports is defined
    - required_ports != None
    - required_ports|length>0

# EXAMPLE
#  - name: define packages, files, directories and other stuff you want to check lots of
#    set_fact:
#      set_fact:
#        required_redirects:
#          - scheme: "http"
#            domain: "ssl.comodoca.com"
#            url: "customer/login"
#            status: "HTTP/1.1 301 Moved Permanently"
#            location: https://ssl.comodoca.com
#          - scheme: "https"
#            domain: "ssl.comodoca.com"
#            url: ""
#            status: "HTTP/2 301"
#            location: https://ssl.comodo.com
#
# NOTE: Expects curl to be installed
# NOTE you dont need to add a trailing or preceeding slash to the domain or url (respectively) it will be added wwhen the request is made
# NOTE You can get the exact status by running ```curl -I <url>``` and checking the first line
# Tests are run on the target host using host headers to hit the right vhost and the default ip address for the instance
# add hosts entries to the remote host to ensure we're going to hit the right instance and not (for example) the live instance

- name: only run this if test_redirects is defined
  block:
    - name: curl to see if the redirect is as expected
      shell: "curl -sI --insecure --header 'Host: {{ item.domain }}' {{ item.scheme }}://{{ ansible_default_ipv4.address }}/{{ item.url | default('') }}"
      args:
        warn: false
      register: curlresults
      loop: "{{ required_redirects }}"

    - name: check the status codes
      assert:
        that:
          - item.stdout_lines[0] | regex_search("HTTP/(1.1|2)\s" + item.item.status|string)
        msg: "FAILED: Item status is not correct for url [{{ item.item.scheme }}://{{ item.item.domain }}]. Status reported from test is [{{ item.stdout_lines[0] | regex_search('[1-5][0-9]{2}') }}], The expected value is [{{ item.item.status }}]. Expected location is [{{ item.item.location }}]"
      loop: "{{ curlresults.results }}"

    - name: check the locations
      assert:
        that:
          - item.stdout | regex_search("[lL]ocation:\s" + item.item.location + "\/?(\n|$)")
        msg: "FAILED: Location is not correct for url [{{ item.item.scheme }}://{{ item.item.domain }}]. The location reported from the test is [{{ item.stdout | regex_search('[Ll]ocation:\\s.+$') | regex_replace('[lL]ocation:\\s') }}], The expected value is [{{ item.item.location }}]"
      loop: "{{ curlresults.results }}"
      when: item.item.location is defined
  when:
    - required_redirects is defined
    - required_redirects != None
    - required_redirects|length>0

# EXAMPLE
#  - name: define ports, certificates, http redirects
#    set_fact:
#      set_fact:
#        required_certs:
#          - "sectigo.com"
#
# NOTE: Expects openssl to be installed
# NOTE: The test will connect on port 443 to the vms ansible_default_ipv4.address and send the list entry as a host header
- name: only run this if test_certs is defined
  block:
    # community.crypto.get_certificate while neat does not allow adding of host headers, which mandates the fqdn point where we want it to.
    # which is not helpful for testing. So we'll shell openssl instead
    # TODO: add the ability to define an ip address and port to the test
    # TODO: is subject_alt_name ALWAYS present in certificates? if not it could fail in certain circumstances
    - name: use openssl to get certificate information from the webserver
      shell: "echo -e \"\\r\\n\\r\\n\" | openssl s_client -connect {{ ansible_default_ipv4.address }}:443 -servername {{ item }} 2>/dev/null | openssl x509"
      register: rawcerts
      loop: "{{ required_certs }}"
      loop_control:
        label: "{{ item }}"

    - name: get information from the certificates
      community.crypto.x509_certificate_info:
        content: "{{ item.stdout }}"
      register: certinfo
      loop: "{{ rawcerts.results }}"
      loop_control:
        label: "{{ item.item }}"

    - name: Check that the expected domain name appears in the certificate itself
      assert:
        that: "'{{ item.item.item }}' in '{{ item.subject_alt_name | default([],True) | join(',') }},{{ item.subject.commonName }}'"
        msg: "'DNS:{{ item.item.item }} should be in {{ item.subject_alt_name | join(', ') }} but is not"
        quiet: true
      loop: "{{ certinfo.results }}"
      loop_control:
        label: "{{ item.item.item }}"

    # TODO include a check to ensure its not going to expire soon
  when:
    - required_certs is defined
    - required_certs != None
    - required_certs|length>0
